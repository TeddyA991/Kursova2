Програмата стартира с изчитане на файл Data.txt и визуализиране на списъка.
Структурата на файла е твърда. Записите са по редове и отделните елементи в реда са разделени с табулация:
 - Тип животно (1-куче, 2-коте);
 - Име (до 20 символа);
 - Дата на постъпване (формат ДД-ММ-ГГГГ или "-" за празно поле);
 - Дата на кастриране (формат ДД-ММ-ГГГГ или "-" за празно поле);
 - Дата на осиновяване (формат ДД-ММ-ГГГГ или "-" за празно поле);

Следва потрбителски избор чрез меню:
Сортиране по тип животно и визуализиране;
Сортиране по дата на осиновяване;
Изтриване на осиновени животни;

Описание на функциите

Структурата Data съдържа типа на животното (куче или коте) AnType - изброим тип, името на животното и датите на постъпване, кастриране и осиновяване (символни низове до 20 символа).

За реализацията на свързания списък се използва струкурата Item.

int print_menu()
Извежда менюто на екрана.

int ReadFile(FILE *fl, lItem **list)
Изчита файла fl и от данните в него генерира списък list, като заделя необходимата памет.
Четенето на файла се реализира в цикъл, като се обхожда до края му (EOF). Използва се fscanf с форматиране табулация (съгласно описанието по-горе).
Присвоява се информацията във временен възел temp_node от тип iList, който ще сец използва за изграждането на свързания списък.
На указателя за следващия елемент(next) се присвоява NULL в случай, че няма следващ запис във файла.
Ако списъка (параметъра list) е празен се присвоява temp_node. В противен случай temp_node се присвява на указателя next на текущия възел.


void PrintData(lItem *list)
Извежда на екрана съдържанието на списъка list.
Списъкът се обхожда до достигане на NULL в указателя за следващ възел(next==NULL).
Информацията се форматира и извежда на екрана (printf).

void DeleteList(lItem** list)
Изтрива съдържанието на списъка и освобождава заделената памет за елементите в него.
Списъкът се обхожда елемент по елемент до достигане на NULL стойност за текущия елемнт.
Присвоява се стойността на следващия възел на текущия. 
Освобождава се заделената памет на предходния текущ възел (free()).

void SortByType(lItem* list)
Сортира списъка по тип животно и извежда резултата на екрана.
Списъкът се обхожда с два цикъла. Прави се проверка по условието. Типа животно е дефиниран като изброим тип, така че се сравнява int.
Ако проверката е успешна, се разменят възлите. За целта се съхранява информацията на текущия възел във временна променлива (структура aData).
На текущия възел се присвоява стойността на следващия. А на следващия се присвоява тази от временната променлива.

void SortByDate3(lItem* list)
Сортира списъка според датата на осиновяване (възходящо) и извежда резултата на екрана.
По описания наин по-горе.

void DeleteAdopted(lItem** list)
Изтрива осиновените животни от списъка и извежда резултата на екрана.
Списъкът се обхожда до достигане на NULL в стойността на указателя за следващ възел. Прави се проверка за валидна стойност на датата за осиновяване.
Използват се два указателя към списъка list. Ако проверката е успешна за следващ възел се присвоява по-следващия в списъка. 
Освобождава се заделената памет на възела и се присвоява указателя, сочещ към следващия. Ако условието не е спазено се на двата указателя се присвоява стойностите на указателите към следващите в списъка. След обхождането се прави проверка дали първия възел в списъка отговаря на условието и се премахва от списъка ако е така.